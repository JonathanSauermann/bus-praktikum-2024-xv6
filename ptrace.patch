diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..916ea33 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -128,6 +128,8 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  printf("%d exec(): process PID %d is executing %s\n", ticks, p->pid, path);
+
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..3a246cd 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -322,6 +322,8 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  printf("%d fork(): process PID %d (parent) called fork(). xv6 created a new child process %d\n", ticks, np->parent->pid, np->pid);
+
   return pid;
 }
 
@@ -380,6 +382,8 @@ exit(int status)
 
   release(&wait_lock);
 
+  printf("%d exit(): exiting process PID %d\n", ticks, p->pid);
+
   // Jump into the scheduler, never to return.
   sched();
   panic("zombie exit");
@@ -394,6 +398,8 @@ wait(uint64 addr)
   int havekids, pid;
   struct proc *p = myproc();
 
+  printf("%d wait(): process PID %d called wait()\n", ticks, p->pid);
+
   acquire(&wait_lock);
 
   for(;;){
@@ -414,6 +420,7 @@ wait(uint64 addr)
             release(&wait_lock);
             return -1;
           }
+          printf("%d wait(): process PID %d completed waiting for child process PID %d to exit (which exited with exit code %d)\n", ticks, p->pid, pp->pid, pp->xstate);
           freeproc(pp);
           release(&pp->lock);
           release(&wait_lock);
@@ -432,6 +439,7 @@ wait(uint64 addr)
     // Wait for a child to exit.
     sleep(p, &wait_lock);  //DOC: wait-sleep
   }
+  printf("%d wait(): process PID %d is leaving wait()\n", ticks, p->pid);
 }
 
 // Per-CPU process scheduler.
